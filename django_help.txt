d1 r1
AbstractBaseUser

### ✨ **`AbstractBaseUser` چیست؟**

`AbstractBaseUser` یک **کلاس انتزاعی (abstract class)** است که:

* امکانات پایه‌ی مدیریت رمز عبور را به شما می‌دهد (hash کردن، بررسی پسورد، تغییر پسورد و …).
* خودش هیچ فیلدی مثل `username` یا `email` ندارد.
  ✅ یعنی **شما باید خودتان فیلدهای مورد نیاز را تعریف کنید** (مثل `email`, `username`, `is_active`, `is_staff`, …).

---

### 📌 **چه زمانی از `AbstractBaseUser` استفاده کنیم؟**

وقتی می‌خواهید یک مدل کاربر کاملاً سفارشی داشته باشید که حتی فیلد `username` یا `email` یا هر چیز دیگری را خودتان طراحی کنید.
مثلاً می‌خواهید کاربران با شماره موبایل وارد شوند یا از فیلدهای دیگری استفاده کنید.

---

### 🔧 **قدم‌های استفاده از `AbstractBaseUser`:**

#### 1. مدل کاربر را بسازید:

```python
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.db import models

# اول یک UserManager سفارشی
class MyUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('کاربر باید ایمیل داشته باشد')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, password, **extra_fields)


# مدل کاربر سفارشی
class MyUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    full_name = models.CharField(max_length=200, blank=True)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = MyUserManager()

    USERNAME_FIELD = 'email'          # برای ورود از ایمیل استفاده کن
    REQUIRED_FIELDS = []              # فیلدهای اضافی برای createsuperuser

    def __str__(self):
        return self.email
```

---

#### 2. به جنگو بگویید که از مدل شما استفاده کند:

در `settings.py` اضافه کنید:

```python
AUTH_USER_MODEL = 'yourapp.MyUser'
```

---

#### 3. مهاجرت‌ها را اجرا کنید:

```bash
python manage.py makemigrations
python manage.py migrate
```

---

#### 4. حالا می‌توانید:

```python
# ساخت کاربر عادی
MyUser.objects.create_user(email="test@example.com", password="1234")

# ساخت ادمین
MyUser.objects.create_superuser(email="admin@example.com", password="admin123")
```

---

### ✅ نکات مهم:

✔️ اگر از `AbstractBaseUser` استفاده کردی، حتماً:

* یک `UserManager` سفارشی بساز.
* `USERNAME_FIELD` را مشخص کن.
* فیلدهای لازم (`is_active`, `is_staff`, …) را خودت اضافه کن.

✔️ اگر نیازی به این سطح از سفارشی‌سازی نداری و فقط می‌خواهی چند فیلد اضافه کنی، بهتر است از **`AbstractUser`** استفاده کنی چون ساده‌تر است.

-----------------------------------------------------------------------------
d1 r1
### ✨ **Manager چیست؟**

* یک کلاس است که معمولاً از `django.db.models.Manager` ارث‌بری می‌کند.
* روی مدل قرار می‌گیرد و وظیفه دارد متدهایی برای بازیابی داده‌ها از دیتابیس فراهم کند.
* می‌توانید با ساخت یک Manager سفارشی، Queryهای خاص خودتان را به صورت متد جدید اضافه کنید.

---

### ✅ **Manager پیش‌فرض**

وقتی یک مدل می‌سازید، اگر Manager اختصاصی تعریف نکنید، جنگو یک Manager به نام `objects` برای شما قرار می‌دهد:

```python
class Book(models.Model):
    title = models.CharField(max_length=200)
    author = models.CharField(max_length=100)

# استفاده:
books = Book.objects.all()
```

---

### ✅ **ساخت Manager سفارشی**

اگر بخواهید Queryهای خاصی را همیشه به صورت متد آماده داشته باشید، می‌توانید یک Manager بسازید:

```python
from django.db import models

class PublishedManager(models.Manager):
    def get_queryset(self):
        # فقط کتاب‌های منتشر شده را برگردان
        return super().get_queryset().filter(is_published=True)
    
    def recent_books(self):
        # یک متد اضافی برای کتاب‌های جدید
        return self.get_queryset().order_by('-created_at')[:5]


class Book(models.Model):
    title = models.CharField(max_length=200)
    is_published = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    # Manager پیش‌فرض خودمان
    objects = PublishedManager()
```

✅ حالا:

```python
# فقط کتاب‌های منتشرشده
Book.objects.all()

# فقط ۵ کتاب منتشرشدهٔ جدید
Book.objects.recent_books()
```

---

### ✅ **داشتن چند Manager**

می‌توانید چندین Manager داشته باشید، ولی **اولین Manager** که تعریف می‌کنید به عنوان **Manager پیش‌فرض برای QuerySet**ها استفاده می‌شود. برای دسترسی به Manager اصلی (که همه‌ی داده‌ها را می‌دهد)، می‌توانید مثلاً یک Manager دیگر اضافه کنید:

```python
class Book(models.Model):
    title = models.CharField(max_length=200)
    is_published = models.BooleanField(default=False)

    all_objects = models.Manager()         # همه رکوردها
    objects = PublishedManager()           # فقط منتشرشده‌ها

-----------------------------------------------------------------------------
d1 r1

def has_perm(self, perm, obj=None):
    return True
وقتی یک مدل کاربر سفارشی می‌سازی (با AbstractBaseUser یا حتی AbstractUser)، جنگو برای سیستم پرمیژن‌ها (مجوزها) نیاز داره این متد توی کلاس کاربرت وجود داشته باشه:

اگر از AbstractUser استفاده کنی، خودش has_perm() رو از PermissionsMixin به ارث می‌بره و لازم نیست کاری کنی.
ولی اگر از AbstractBaseUser استفاده کردی، خودت باید این متد رو تعریف کنی (یا PermissionsMixin رو هم اضافه کنی تا برات آماده باشه).

-----------------------------------------------------------------------------
d1
def has_module_perms(self, app_label):
    # آیا کاربر به کل یک اپ دسترسی داره؟
    return True

وقتی از جنگو Admin یا سیستم مجوزها استفاده می‌کنی، گاهی می‌خوای بدونی:

✅ «این کاربر به کل یک اپلیکیشن دسترسی دارد یا نه؟»
(نه فقط به یک مجوز خاص روی یک مدل)

-----------------------------------------------------------------------------
d1 r1

BaseUserManager چیست؟
وقتی یک مدل کاربر سفارشی با AbstractBaseUser می‌سازی،
برای این‌که راحت بتونی کاربر و سوپریوزر بسازی، باید یک Manager سفارشی هم بنویسی.

این Manager معمولاً از BaseUserManager ارث‌بری می‌کنه.

چون BaseUserManager یک سری متد و امکانات آماده برای مدیریت کاربران بهت می‌ده.

مهم‌ترینش متد normalize_email هست که خودش ایمیل رو تمیز می‌کنه.

و همچنین ساختار استاندارد برای پیاده‌سازی create_user و create_superuser رو فراهم می‌کنه.

-----------------------------------------------------------------------------

session_10

static 
load static up after extends

-----------------------------------------------------------------------------

session_11

حتماً! 🌱
بیایم خیلی ساده و در عین حال دقیق به **کلید خارجی (ForeignKey)** و **related\_name** در جنگو نگاه کنیم.

---

### 🔑 **کلید خارجی (ForeignKey)** چیست؟

در مدل‌های جنگو برای تعریف رابطه‌ی **یک‌به‌چند (One‑to‑Many)** از `ForeignKey` استفاده می‌کنیم.
مثال ساده:

```python
class Category(models.Model):
    name = models.CharField(max_length=100)

class Product(models.Model):
    name = models.CharField(max_length=100)
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
```

✅ هر **Product** به یک **Category** وابسته است.
✅ یعنی `Product` یک فیلد `category` دارد که به مدل `Category` وصل است.

---

### ✨ **پارامتر `related_name`**

وقتی یک کلید خارجی تعریف می‌کنی، جنگو به‌طور خودکار یک **رابطه‌ی معکوس** هم می‌سازد.
یعنی از روی یک شیء `Category` می‌توانی به لیست محصولاتش برسـی.

به‌طور پیش‌فرض اسم این رابطه معکوس به صورت `<نام مدل کوچک>_set` است.

```python
cat = Category.objects.get(id=1)
cat.product_set.all()   # همه‌ی محصول‌های این دسته‌بندی
```

ولی اگر بخواهی این اسم معکوس را خودت تعیین کنی، از `related_name` استفاده می‌کنی:

```python
class Product(models.Model):
    name = models.CharField(max_length=100)
    category = models.ForeignKey(
        Category,
        on_delete=models.CASCADE,
        related_name='products'
    )
```

حالا:

```python
cat = Category.objects.get(id=1)
cat.products.all()   # چون related_name='products'
```

---

### 🔧 **نکات مهم:**

✅ `related_name` فقط برای **رابطه معکوس** استفاده می‌شود، نه برای دسترسی از سمت کلید خارجی.
از سمت Product همچنان می‌گویی:

```python
product.category
```

✅ اگر `related_name` را ننویسی، جنگو به‌طور پیش‌فرض از `<modelname>_set` استفاده می‌کند.

✅ اگر نمی‌خواهی رابطه معکوس بسازی (یعنی از سمت Category به محصولات دسترسی نداشته باشی):

```python
category = models.ForeignKey(
    Category,
    on_delete=models.CASCADE,
    related_name='+'
)
```

---

### 🧭 **مثال کاربردی‌تر**

فرض کن هر پست وبلاگ به یک نویسنده وصل است:

```python
class Author(models.Model):
    name = models.CharField(max_length=100)

class Post(models.Model):
    title = models.CharField(max_length=200)
    author = models.ForeignKey(
        Author,
        on_delete=models.CASCADE,
        related_name='posts'
    )
```

حالا می‌تونی:

```python
a = Author.objects.get(id=1)
a.posts.all()     # همه‌ی پست‌های این نویسنده
```
-----------------------------------------------------------------------------

get user:

from .model import user

settings.AUTH_USER_MODEL

from django.contrib.auth import get_user_model

-----------------------------------------------------------------------------

permissions 

intemplates:
perms.<app name>.<access>_<model name>
sample: {{perms.home.add_order}}

in view:
request.user.has_perm(oreders.add_order)

admin:  readonly_fields

disabled add_super_user:

def get_form(self, request, obj=None, **kwargs):
    form = super().get_form(request, obj,  **kwargs)
    is_superuser = request.user.is_superuser
    if not is_superuser:
        form.base_fields["is_superuser"].disabled = True
    return form

-----------------------------------------------------------------------------

 `yield` چیست؟

`yield` مانند `return` عمل می‌کند، ولی به‌جای اینکه **تابع را به‌طور کامل خاتمه دهد**، آن را **معلق نگه می‌دارد** و بعداً دوباره از همان‌جا ادامه می‌دهد.

---

## 📦 تفاوت `yield` با `return`

| `return`                         | `yield`                                                      |
| -------------------------------- | ------------------------------------------------------------ |
| تابع را متوقف می‌کند             | تابع را متوقف نمی‌کند (فقط موقتاً)                           |
| مقدار نهایی را بازمی‌گرداند      | مقدار بعدی را برمی‌گرداند (در یک حلقه)                       |
| برای توابع معمولی استفاده می‌شود | برای توابع تولیدکننده (generator) استفاده می‌شود             |
| حافظه‌ی بیشتری مصرف می‌کند       | حافظه‌ی کمتری مصرف می‌کند چون مقادیر را یکی‌یکی تولید می‌کند |

---

## 🧪 مثال ساده:

```python
def my_gen():
    yield 1
    yield 2
    yield 3

gen = my_gen()
for num in gen:
    print(num)
```

🔹 خروجی:

```
1
2
3
```

---

## ✅ کاربردهای `yield`:

* پردازش داده‌های بزرگ بدون بارگذاری کامل در حافظه (مثل خواندن فایل‌های حجیم).
* تولید بی‌نهایت مقدار (مثل اعداد فیبوناچی، اعداد اول و ...).
* پیاده‌سازی الگوریتم‌هایی مثل **جست‌وجوهای lazy**.

---

## 📌 مثال کاربردی‌تر: تولید اعداد فیبوناچی:

```python
def fibonacci():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

gen = fibonacci()
for _ in range(10):
    print(next(gen))
```

---

اگر بخوای کاربرد `yield` رو توی پروژه‌های واقعی مثل Django یا پردازش داده هم نشون بدم، بگو تا مثال‌هایی برات بنویسم.

-----------------------------------------------------------------------------

 `iter` چیست؟

تابع داخلی `iter()` در پایتون یک **iterator** می‌سازد — چیزی که می‌توانید با `next()` از آن عنصر به عنصر جلو بروید.

---

### 🧱 مفهوم پایه:

در پایتون، ساختارهایی مانند `list`, `tuple`, `dict`, `set`, `str` همگی **iterable** هستند، یعنی می‌توان آن‌ها را در `for` استفاده کرد یا با `iter()` به شکل دستی پیمایش کرد.

---

### ✅ مثال ساده:

```python
nums = [10, 20, 30]
it = iter(nums)   # ساخت یک iterator

print(next(it))   # 10
print(next(it))   # 20
print(next(it))   # 30
```

اگر دوباره `next(it)` را اجرا کنید، چون چیزی باقی نمانده، خطای `StopIteration` می‌دهد.

---

## 🧠 تفاوت `iterable` و `iterator`

| ویژگی      | Iterable                                | Iterator                      |
| ---------- | --------------------------------------- | ----------------------------- |
| تعریف      | شی‌ای که می‌توان از آن یک iterator ساخت | شی‌ای که `__next__()` دارد    |
| تابع کلیدی | `__iter__()`                            | `__iter__()` و `__next__()`   |
| مثال       | `list`, `tuple`, `str`                  | چیزی که از `iter()` ساخته شده |

---

## ✳️ ساخت iterator سفارشی:

اگر بخوای یک کلاس بنویسی که خودش مثل لیست کار کنه:

```python
class MyRange:
    def __init__(self, end):
        self.current = 0
        self.end = end

    def __iter__(self):
        return self

    def __next__(self):
        if self.current >= self.end:
            raise StopIteration
        val = self.current
        self.current += 1
        return val

for num in MyRange(5):
    print(num)
```

🔹 خروجی:

```
0
1
2
3
4
```

---

## 📌 جمع‌بندی:

| اگر می‌خواهی...             | استفاده کن از...            |
| --------------------------- | --------------------------- |
| عناصر را یکی‌یکی پردازش کنی | `iter()` و `next()`         |
| حافظه را بهینه مصرف کنی     | `yield`                     |
| کلاس قابل پیمایش بسازی      | `__iter__()` و `__next__()` |

---

اگر دوست داری کاربرد `iter()` یا `yield` در پروژه‌های واقعی مثل خواندن فایل، ساخت API با Django یا الگوریتم‌ها رو هم بدونی، فقط بگو تا مثال کاربردی برات بزنم.
