AbstractBaseUser

### ✨ **`AbstractBaseUser` چیست؟**

`AbstractBaseUser` یک **کلاس انتزاعی (abstract class)** است که:

* امکانات پایه‌ی مدیریت رمز عبور را به شما می‌دهد (hash کردن، بررسی پسورد، تغییر پسورد و …).
* خودش هیچ فیلدی مثل `username` یا `email` ندارد.
  ✅ یعنی **شما باید خودتان فیلدهای مورد نیاز را تعریف کنید** (مثل `email`, `username`, `is_active`, `is_staff`, …).

---

### 📌 **چه زمانی از `AbstractBaseUser` استفاده کنیم؟**

وقتی می‌خواهید یک مدل کاربر کاملاً سفارشی داشته باشید که حتی فیلد `username` یا `email` یا هر چیز دیگری را خودتان طراحی کنید.
مثلاً می‌خواهید کاربران با شماره موبایل وارد شوند یا از فیلدهای دیگری استفاده کنید.

---

### 🔧 **قدم‌های استفاده از `AbstractBaseUser`:**

#### 1. مدل کاربر را بسازید:

```python
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.db import models

# اول یک UserManager سفارشی
class MyUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('کاربر باید ایمیل داشته باشد')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, password, **extra_fields)


# مدل کاربر سفارشی
class MyUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    full_name = models.CharField(max_length=200, blank=True)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = MyUserManager()

    USERNAME_FIELD = 'email'          # برای ورود از ایمیل استفاده کن
    REQUIRED_FIELDS = []              # فیلدهای اضافی برای createsuperuser

    def __str__(self):
        return self.email
```

---

#### 2. به جنگو بگویید که از مدل شما استفاده کند:

در `settings.py` اضافه کنید:

```python
AUTH_USER_MODEL = 'yourapp.MyUser'
```

---

#### 3. مهاجرت‌ها را اجرا کنید:

```bash
python manage.py makemigrations
python manage.py migrate
```

---

#### 4. حالا می‌توانید:

```python
# ساخت کاربر عادی
MyUser.objects.create_user(email="test@example.com", password="1234")

# ساخت ادمین
MyUser.objects.create_superuser(email="admin@example.com", password="admin123")
```

---

### ✅ نکات مهم:

✔️ اگر از `AbstractBaseUser` استفاده کردی، حتماً:

* یک `UserManager` سفارشی بساز.
* `USERNAME_FIELD` را مشخص کن.
* فیلدهای لازم (`is_active`, `is_staff`, …) را خودت اضافه کن.

✔️ اگر نیازی به این سطح از سفارشی‌سازی نداری و فقط می‌خواهی چند فیلد اضافه کنی، بهتر است از **`AbstractUser`** استفاده کنی چون ساده‌تر است.

---

اگر خواستی می‌تونم برات:

* یک پروژهٔ جنگو با مدل کاربر سفارشی آماده کنم،
* یا یک Admin سفارشی برای مدیریت کاربران بسازم.

🛠️ **می‌خوای نمونهٔ کامل‌تری با Admin هم بدم؟** بگو! 🌟

-----------------------------------------------------------------------------

در جنگو (Django)، **Manager** در واقع نقطهٔ اصلی تعامل شما با **QuerySet**ها و دیتابیس است.
هر مدل (Model) به طور پیش‌فرض یک Manager به نام **`objects`** دارد که از طریق آن می‌توانید QuerySet ایجاد کنید (مثل `Model.objects.all()`).

---

### ✨ **Manager چیست؟**

* یک کلاس است که معمولاً از `django.db.models.Manager` ارث‌بری می‌کند.
* روی مدل قرار می‌گیرد و وظیفه دارد متدهایی برای بازیابی داده‌ها از دیتابیس فراهم کند.
* می‌توانید با ساخت یک Manager سفارشی، Queryهای خاص خودتان را به صورت متد جدید اضافه کنید.

---

### ✅ **Manager پیش‌فرض**

وقتی یک مدل می‌سازید، اگر Manager اختصاصی تعریف نکنید، جنگو یک Manager به نام `objects` برای شما قرار می‌دهد:

```python
class Book(models.Model):
    title = models.CharField(max_length=200)
    author = models.CharField(max_length=100)

# استفاده:
books = Book.objects.all()
```

---

### ✅ **ساخت Manager سفارشی**

اگر بخواهید Queryهای خاصی را همیشه به صورت متد آماده داشته باشید، می‌توانید یک Manager بسازید:

```python
from django.db import models

class PublishedManager(models.Manager):
    def get_queryset(self):
        # فقط کتاب‌های منتشر شده را برگردان
        return super().get_queryset().filter(is_published=True)
    
    def recent_books(self):
        # یک متد اضافی برای کتاب‌های جدید
        return self.get_queryset().order_by('-created_at')[:5]


class Book(models.Model):
    title = models.CharField(max_length=200)
    is_published = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    # Manager پیش‌فرض خودمان
    objects = PublishedManager()
```

✅ حالا:

```python
# فقط کتاب‌های منتشرشده
Book.objects.all()

# فقط ۵ کتاب منتشرشدهٔ جدید
Book.objects.recent_books()
```

---

### ✅ **داشتن چند Manager**

می‌توانید چندین Manager داشته باشید، ولی **اولین Manager** که تعریف می‌کنید به عنوان **Manager پیش‌فرض برای QuerySet**ها استفاده می‌شود. برای دسترسی به Manager اصلی (که همه‌ی داده‌ها را می‌دهد)، می‌توانید مثلاً یک Manager دیگر اضافه کنید:

```python
class Book(models.Model):
    title = models.CharField(max_length=200)
    is_published = models.BooleanField(default=False)

    all_objects = models.Manager()         # همه رکوردها
    objects = PublishedManager()           # فقط منتشرشده‌ها
```

---

### ✅ **چه زمانی از Manager سفارشی استفاده کنیم؟**

* وقتی نیاز دارید Queryهای خاصی را همیشه در دسترس داشته باشید.
* وقتی می‌خواهید مدل شما به صورت پیش‌فرض یک فیلتر خاص داشته باشد.
* وقتی می‌خواهید کد تمیزتر و قابل‌استفاده‌مجدد بنویسید.

---

اگر دوست داری می‌تونم برات یک مثال کامل (مدل + Manager + استفاده در view) بنویسم یا حتی Queryهای خاص رو با هم تست کنیم.
📌 **می‌خوای؟** بگو!

-----------------------------------------------------------------------------

def has_perm(self, perm, obj=None):
    return True
وقتی یک مدل کاربر سفارشی می‌سازی (با AbstractBaseUser یا حتی AbstractUser)، جنگو برای سیستم پرمیژن‌ها (مجوزها) نیاز داره این متد توی کلاس کاربرت وجود داشته باشه:

اگر از AbstractUser استفاده کنی، خودش has_perm() رو از PermissionsMixin به ارث می‌بره و لازم نیست کاری کنی.
ولی اگر از AbstractBaseUser استفاده کردی، خودت باید این متد رو تعریف کنی (یا PermissionsMixin رو هم اضافه کنی تا برات آماده باشه).

-----------------------------------------------------------------------------

def has_module_perms(self, app_label):
    # آیا کاربر به کل یک اپ دسترسی داره؟
    return True

وقتی از جنگو Admin یا سیستم مجوزها استفاده می‌کنی، گاهی می‌خوای بدونی:

✅ «این کاربر به کل یک اپلیکیشن دسترسی دارد یا نه؟»
(نه فقط به یک مجوز خاص روی یک مدل)

برای همین جنگو این متد رو صدا می‌زنه.
-----------------------------------------------------------------------------
BaseUserManager چیست؟
وقتی یک مدل کاربر سفارشی با AbstractBaseUser می‌سازی،
برای این‌که راحت بتونی کاربر و سوپریوزر بسازی، باید یک Manager سفارشی هم بنویسی.

این Manager معمولاً از BaseUserManager ارث‌بری می‌کنه.

چون BaseUserManager یک سری متد و امکانات آماده برای مدیریت کاربران بهت می‌ده.

مهم‌ترینش متد normalize_email هست که خودش ایمیل رو تمیز می‌کنه.

و همچنین ساختار استاندارد برای پیاده‌سازی create_user و create_superuser رو فراهم می‌کنه.